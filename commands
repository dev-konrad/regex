<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zoomable and Draggable Image</title>
    <style>
        .image-container {
            width: 500px; /* Set the desired width */
            height: 300px; /* Set the desired height */
            overflow: auto; /* Show scrollbars */
            position: relative;
            border: 1px solid #ccc; /* Optional border for visibility */
            cursor: grab;
        }

        #draggable-image {
            position: relative; /* Changed from absolute to relative */
            width: auto;
            height: 100%; /* Ensure the image is initially fitting the container's height */
            transform-origin: top left;
            user-select: none;
            -webkit-user-drag: none;
        }
    </style>
</head>
<body>
    <div class="image-container">
        <img id="draggable-image" src="your-image.jpg" alt="Draggable">
    </div>

    <script>
        const container = document.querySelector('.image-container');
        const img = document.getElementById('draggable-image');

        let isDragging = false;
        let startX, startY;
        let initialX = 0, initialY = 0;
        let scale = 1;

        container.addEventListener('mousedown', (e) => {
            isDragging = true;
            startX = e.clientX - initialX;
            startY = e.clientY - initialY;
            container.style.cursor = 'grabbing';
        });

        container.addEventListener('mousemove', (e) => {
            if (isDragging) {
                initialX = e.clientX - startX;
                initialY = e.clientY - startY;
                img.style.transform = `translate(${initialX}px, ${initialY}px) scale(${scale})`;
            }
        });

        container.addEventListener('mouseup', () => {
            isDragging = false;
            container.style.cursor = 'grab';
        });

        container.addEventListener('mouseleave', () => {
            isDragging = false;
            container.style.cursor = 'grab';
        });

        container.addEventListener('wheel', (e) => {
            if (e.ctrlKey) {
                e.preventDefault();
                const rect = img.getBoundingClientRect();
                const offsetX = (e.clientX - rect.left) / rect.width;
                const offsetY = (e.clientY - rect.top) / rect.height;

                const delta = e.deltaY > 0 ? -0.1 : 0.1;
                scale = Math.max(0.1, scale + delta);

                img.style.transformOrigin = `${offsetX * 100}% ${offsetY * 100}%`;
                img.style.transform = `translate(${initialX}px, ${initialY}px) scale(${scale})`;

                // Adjust container's scroll to accommodate the new image size
                container.scrollLeft = -initialX;
                container.scrollTop = -initialY;
            }
        });
    </script>
</body>
</html>
